//
// Created by Laurent Fourrier on 2017-05-16.
// Copyright (c) 2017 Tiwind Software. All rights reserved.
//

#include "cpu.h"

#include <iostream>
#include <cstring>

using namespace c8;

namespace {
    std::uint8_t const FONT[80] = {
            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
            0x20, 0x60, 0x20, 0x20, 0x70, // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
            0x90, 0x90, 0xF0, 0x10, 0x10, // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
            0xF0, 0x10, 0x20, 0x40, 0x40, // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90, // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
            0xF0, 0x80, 0x80, 0x80, 0xF0, // C
            0xE0, 0x90, 0x90, 0x90, 0xE0, // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
            0xF0, 0x80, 0xF0, 0x80, 0xF0  // F
    };
}

cpu::cpu() {
    // Copy the font in memory
    memcpy(_memory.interpreter.font, FONT, 80);
}

void cpu::load_in_memory(const std::vector<std::uint8_t> &data, unsigned int offset) {
    unsigned int copy = static_cast<unsigned int>(data.size());
    if (copy + offset > C8_MEMORY_SIZE) {
        copy = C8_MEMORY_SIZE - offset;
    }
    memcpy(_memory.memory + offset, &data[0], copy);
}